pipeline{
    agent any
    environment {
      DOCKER_TAG = getVersion()
    }

    stages{
        stage('SCM'){
            steps{
                git credentialsId: 'GitLab', 
                    url: 'https://gitlab.com/aguinaldoa80/demo-jenkins'    
           }
        }
        
        stage('Maven Build'){
            steps{
                sh 'mvn clean package'
           }
        } 
        
        stage('Docker Build'){
            steps{
                sh 'docker build . -t jintsuy/demo-jenkins:${DOCKER_TAG}'
           }
        }
        
        stage('DockerHub Push'){
            steps{
                withCredentials([string(credentialsId: 'docker-hub', variable: 'dockerHubPwd')]) {
                    sh 'docker login -u jintsuy -p ${dockerHubPwd}'
                }
                sh 'docker push jintsuy/demo-jenkins:${DOCKER_TAG}'
           }
        }
        
        stage('Docker Deploy'){
            steps{
                ansiblePlaybook credentialsId: 
                    'ssh-devserver', 
                    disableHostKeyChecking: true, 
                    extras: '-e DOCKER_TAG="${DOCKER_TAG}"', 
                    installation: 'ansible', 
                    inventory: 'dev.inv', 
                    playbook: 'deploy-docker.yml'
            }
        }
        /*
        ssh-keygen -t rsa -f ~/.ssh/aguinaldoa80 -C aguinaldoa80 -b 2048
        kops create cluster simple.k8s.local --zones us-west4-b --state $KOPS_STATE_STORE --project=$PROJECT
        kops update cluster --name simple.k8s.local --yes --admin
        kops delete cluster --name simple.k8s.local --yes
        kops get instancegroup --state $KOPS_STATE_STORE --name simple.k8s.local
        kops get cluster --state $KOPS_STATE_STORE simple.k8s.local -oyaml
        kubectl run hey  --image helo-world
        kubectl get pod
        kubectl delete pod hey
        */
    }
}

def getVersion(){
    def commitHash = sh label: '', returnStdout: true, script: 'git rev-parse --short HEAD'
    return commitHash
}